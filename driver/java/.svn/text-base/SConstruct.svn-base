#-*- mode: python -*-
EnsureSConsVersion( 1, 1, 0 )

import platform
import os
import re
from os.path import join, dirname, abspath

root_dir = dirname(File('SConstruct').rfile().abspath)
java_home = join(root_dir,'../../java')
jdk_home = ""
# --- options ----

options = {}

options_topass = {}

def GuessOS():
   id = platform.system()
   if id == 'Linux':
      return 'linux'
   elif id == 'Windows' or id == 'Microsoft':
      return 'win32'
   else:
      return None


def GuessArch():
   id = platform.machine()
   id = id.lower()
   if (not id) or (not re.match('(x|i[3-6])86$', id) is None):
      return 'ia32'
   elif id == 'i86pc':
      return 'ia32'
   elif id == 'x86_64':
      return 'ia64'
   elif id == 'amd64':
      return 'ia64'
   elif id == 'ppc64':
      return 'ppc64'
   else:
      return None

guess_os = GuessOS()
guess_arch = GuessArch()

def add_option( name, help , nargs , contibutesToVariantDir , dest=None ):

    if dest is None:
        dest = name

    AddOption( "--" + name , 
               dest=dest,
               type="string",
               nargs=nargs,
               action="store",
               help=help )

    options[name] = { "help" : help ,
                      "nargs" : nargs , 
                      "contibutesToVariantDir" : contibutesToVariantDir ,
                      "dest" : dest } 

def get_option( name ):
    return GetOption( name )

def _has_option( name ):
    x = get_option( name )
    if x is None:
        return False

    if x == False:
        return False

    if x == "":
        return False

    return True

def has_option( name ):
    x = _has_option(name)

    if name not in options_topass:
        # if someone already set this, don't overwrite
        options_topass[name] = x

    return x

# installation options
#add_option( "javahome", "install java driver", 1, False)
add_option( "language" , "description language" , 1 , False )
add_option( "dd" , "debug mode" , 0 , False )

language = get_option ( "language" )
isDebug = has_option ( "dd" )
if language is None:
   os.system ( "scons -C ../../misc/autogen" )
else:
   os.system ( "scons -C ../../misc/autogen --language=" + language )

if guess_os == "linux":
   if guess_arch == "ia64":
      jdk_home = join ( java_home, "jdk_linux64" )
   elif guess_arch == "ia32":
      jdk_home = join ( java_home, "jdk_linux32" )
   elif guess_arch == "ppc64":
      jdk_home = join ( java_home, "jdk_ppclinux64" )
elif guess_os == "win32":
   if guess_arch == "ia64":
      jdk_home = join ( java_home, "jdk_win64" )
   elif guess_arch == "ia32":
      jdk_home = join ( java_home, "jdk_win32" )
else:
   print( "No special config for [" + os.sys.platform + "] which probably means it won't work" )
jarPath = join ( jdk_home, "bin" )
javaEnv = Environment( BUILD_DIR = root_dir, tools=['javac', 'jar'],
    JAVACLASSPATH = Split("""
          lib/hadoop-core-1.2.0.jar
     """),
    JAVACLASSDIR = Split("""
          lib/hadoop-core-1.2.0.jar
    """) )
javaEnv['JAVAHOME'] = jdk_home
javaEnv['ENV']['PATH'] = os.environ['PATH']
#if has_option( "javahome" ):
#   javaEnv['JAVAHOME'] = get_option('javahome')
#   javaEnv['ENV']['PATH'] = os.environ['PATH']
#else:
#   print "Please input the Java Home Directory, for example: 'scons --javahome=C:\Java' "
#   exit(0)


Export("javaEnv")
Export("jarPath")
if isDebug:
	javaEnv['BUILDPATH']='build/debug'
	javaEnv['JARNAME']='sequoiadb.jar'
	javaEnv['CCFLAGS'] = '-g'
else:
	javaEnv['JARNAME']='sequoiadb.jar'
	javaEnv['BUILDPATH']='build/release'
javaEnv.Execute(Mkdir(javaEnv['BUILDPATH']))	
SConscript( 'SConscript', variant_dir=javaEnv['BUILDPATH'], duplicate=False )
